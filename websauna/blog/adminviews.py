"""Admin interface views and buttons."""

import colander
import deform
from websauna.system.core.viewconfig import view_overrides
from websauna.system.crud import listing
from websauna.system.admin.views import Listing as DefaultListing
from websauna.system.admin.views import Add as DefaultAdd
from websauna.system.form.csrf import CSRFSchema
from websauna.system.form.resourceregistry import ResourceRegistry
from websauna.system.form.schema import objectify

from .admins import PostAdmin
from .models import Post


class PostSchema(CSRFSchema):
    """Form to add/edit blog posts"""

    title = colander.SchemaNode(colander.String(), required=True)

    author = colander.SchemaNode(colander.String(), description="The name of the author", required=True)

    slug = colander.SchemaNode(colander.String(),
        required=False,
        description="Leave empty to automatically generate from title")

    excerpt = colander.SchemaNode(colander.String(),
        description="Snippet of text shown in Google search, blog roll and RSS feed. Keep in 1-2 sentences.",
        required = True,
        widget=deform.widget.TextAreaWidget(),)

    body = colander.SchemaNode(colander.String(),
            description="Use Markdown formatting.",
            required=True,
            widget=deform.widget.TextAreaWidget(rows=80),)


@view_overrides(context=PostAdmin)
class PostListing(DefaultListing):
    """Show all blog posts."""
    table = listing.Table(
        columns = [
            listing.Column("id", "Id",),
            listing.Column("published_at", "Published at"),
            listing.Column("title", "Title"),
            listing.ControlsColumn()
        ]
    )

@view_overrides(context=PostAdmin)
class PostAdd(DefaultAdd):
    """User listing modified to show the user hometown based on geoip of last login IP."""

    def get_form(self):
        """Use hand written schema instead of autogenerated for adding new posts."""
        schema = PostSchema().bind(request=self.request)
        form = deform.Form(schema, buttons=self.get_buttons(), resource_registry=ResourceRegistry(self.request))
        return form

    def initialize_object(self, form, appstruct: dict, obj: Post):
        """Record values from the form on a freshly created object."""
        objectify(form.schema, appstruct, obj)
        obj.ensure_slug(self.request.dbsession)
