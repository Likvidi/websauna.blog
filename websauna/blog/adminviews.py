"""Admin interface views and buttons."""

import colander
import deform
from pyramid.httpexceptions import HTTPFound
from pyramid.view import view_config
from websauna.system.core import messages
from websauna.system.core.viewconfig import view_overrides
from websauna.system.crud import listing
from websauna.system.admin.views import Listing as DefaultListing
from websauna.system.admin.views import Add as DefaultAdd
from websauna.system.admin.views import Show as DefaultShow
from websauna.system.admin.views import Edit as DefaultEdit
from websauna.system.crud.views import ResourceButton
from websauna.system.crud.views import TraverseLinkButton
from websauna.system.form.csrf import CSRFSchema
from websauna.system.form.resourceregistry import ResourceRegistry
from websauna.system.form.schema import objectify, dictify
from websauna.system.http import Request
from websauna.utils.time import now

from .admins import PostAdmin
from .models import Post
from .views import get_post_resource


class PostSchema(CSRFSchema):
    """Form to add/edit blog posts"""

    title = colander.SchemaNode(colander.String(), required=True)

    author = colander.SchemaNode(colander.String(), description="The name of the author", required=True)

    slug = colander.SchemaNode(colander.String(),
        required=False,
        description="Leave empty to automatically generate from title")

    excerpt = colander.SchemaNode(colander.String(),
        description="Snippet of text shown in Google search, blog roll and RSS feed. Keep in 1-2 sentences.",
        required = True,
        widget=deform.widget.TextAreaWidget(),)

    body = colander.SchemaNode(colander.String(),
            description="Use Markdown formatting.",
            required=True,
            widget=deform.widget.TextAreaWidget(rows=80),)

    def dictify(self, obj: Post) -> dict:
        """Serialize SQLAlchemy model instance to nested dictionary appstruct presentation."""
        appstruct = dictify(self, obj)
        return appstruct

    def objectify(self, appstruct: dict, obj: Post):
        """Store the dictionary data from the form submission on the object."""
        objectify(self, appstruct, obj)


@view_overrides(context=PostAdmin)
class PostListing(DefaultListing):
    """Show all blog posts."""
    table = listing.Table(
        columns = [
            listing.Column("id", "Id",),
            listing.Column("published_at", "Published at"),
            listing.Column("title", "Title"),
            listing.ControlsColumn()
        ]
    )

@view_overrides(context=PostAdmin)
class PostAdd(DefaultAdd):
    """User listing modified to show the user hometown based on geoip of last login IP."""

    def get_form(self):
        """Use hand written schema instead of autogenerated for adding new posts."""
        schema = PostSchema().bind(request=self.request)
        form = deform.Form(schema, buttons=self.get_buttons(), resource_registry=ResourceRegistry(self.request))
        return form

    def add_object(self, obj):
        """Add objects to transaction lifecycle and flush newly created object to persist storage to give them id."""
        dbsession = self.context.get_dbsession()
        obj.ensure_slug(dbsession)
        dbsession.add(obj)
        dbsession.flush()


@view_overrides(context=PostAdmin.Resource)
class PostEdit(DefaultEdit):
    """User listing modified to show the user hometown based on geoip of last login IP."""

    def get_form(self):
        """Use hand written schema instead of autogenerated for adding new posts."""
        schema = PostSchema().bind(request=self.request)
        form = deform.Form(schema, buttons=self.get_buttons(), resource_registry=ResourceRegistry(self.request))
        return form

    def initialize_object(self, form, appstruct: dict, obj: Post):
        """Record values from the form on a freshly created object."""

        # Copy values from dictified Colander presentation to SQLAlchemy model instance
        objectify(form.schema, appstruct, obj)


@view_overrides(context=PostAdmin.Resource)
class PostShow(DefaultShow):
    """Show blog post technical details."""

    @property
    def resource_buttons(self):
        """Customize buttons toolbar."""

        buttons = DefaultShow.resource_buttons.copy()

        # View on site button
        view_on_site = ResourceButton(id="btn-view-on-site", name="View on site")
        def link_on_site(context, request):
            resource = get_post_resource(request, context.get_object().slug)
            return request.resource_url(resource)
        view_on_site.get_link = link_on_site
        buttons.append(view_on_site)

        # Publish button

        if not self.get_object().published_at:
            change_publish_status = TraverseLinkButton(id="btn-change-publish-status", name="Publish", view_name="change_publish_status")
        else:
            change_publish_status = TraverseLinkButton(id="btn-change-publish-status", name="Unpublish", view_name="change_publish_status")

        # This is a state changing action, so we want to do HTTP POST
        change_publish_status.template = "crud/form_button.html"
        buttons.append(change_publish_status)

        return buttons


@view_config(context=PostAdmin.Resource, name="change_publish_status", route_name="admin", request_method="POST")
def change_publish_status(context: PostAdmin.Resource, request: Request):
    """Change publish status."""

    post = context.get_object()
    if post.published_at:
        post.published_at = None
        messages.add(request, kind="info", msg="The post has been retracted.", msg_id="msg-unpublished")
    else:
        post.published_at = now()
        messages.add(request, kind="info", msg="The post has been published.", msg_id="msg-published")

    # Back to show page
    return HTTPFound(request.resource_url(context, "show"))
